package monologue;


{%for t in geomTypes%}
import edu.wpi.first.math.geometry.{{t.TypeName}};
{%endfor%}
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.*;
import edu.wpi.first.util.struct.Struct;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilderImpl;

import java.util.HashMap;
import java.util.Map;
import java.util.function.LongConsumer;
import java.util.function.Supplier;

class NTLogger extends GenericLogger {
    public NTLogger() {super();}

    private final NetworkTableInstance table = NetworkTableInstance.getDefault();

    private final Map<String, Integer> published = new HashMap<>();
    private final Map<String, Topic> topics = new HashMap<>();
    private final Map<String, StructEntry<?>> structEntrys = new HashMap<>();

    {%for t in types%}
    @Override
    public void put(String entryName, {{t.java.ValueType}} value, LogLevel level) {
        if (level == LogLevel.DEBUG && !Monologue.isDebug()) {
            if (published.containsKey(entryName) && topics.containsKey(entryName)) {
                NetworkTablesJNI.unpublish(
                    published.remove(entryName)
                );
            }
            return;
        } else if (level == LogLevel.FILE_IN_COMP && !Monologue.isDebug()) {
            Monologue.dataLogger.put(entryName, value, level);
            if (published.containsKey(entryName) && topics.containsKey(entryName)) {
                NetworkTablesJNI.unpublish(
                    published.remove(entryName)
                );
            }
            return;
        }

        if (!topics.containsKey(entryName)) {
            var topic = table.get{{t.java.EntryName}}Topic(entryName);
{%if t.TypeName == 'Raw'%}
            var publisher = topic.publish("raw");
{%else%}
            var publisher = topic.publish();
{%endif%}
            published.put(entryName, publisher.getHandle());
            topics.put(entryName, topic);
        }

        if (!published.containsKey(entryName)) {
{%if t.TypeName == 'Raw'%}
            published.put(entryName, (({{t.java.EntryName}}Topic) topics.get(entryName)).publish("raw").getHandle());
{%else%}
            published.put(entryName, (({{t.java.EntryName}}Topic) topics.get(entryName)).publish().getHandle());
{%endif%}
        }
{%if t.TypeName == 'IntegerArray'%}
        NetworkTablesJNI.set{{t.java.EntryName}}(published.get(entryName), 0, toLongArray(value));
{%else%}
        NetworkTablesJNI.set{{t.java.EntryName}}(published.get(entryName), 0, value);
{%endif%}
    }

    @Override
    public void add{{t.TypeName}}(String entryName, {{t.java.Supplier}} valueSupplier, LogLevel level) {
        var topic = table.get{{t.java.EntryName}}Topic(entryName);
{%if t.TypeName == 'Raw'%}
        var entry = topic.getEntry("raw", {{t.java.EmptyValue}});
{%elif t.TypeName == 'IntegerArray'%}
        var entry = topic.getEntry(new long[] {});
{%else%}
        var entry = topic.getEntry({{t.java.EmptyValue}});
{%endif%}
        LongConsumer consumer;
{%if t.TypeName == 'IntegerArray'%}
        if (this.isLazy()) {
            consumer = new LongConsumer() {
                private long[] lastValue = new long[] {};
                @Override
                public void accept(long timestamp) {
                    var value = toLongArray(valueSupplier.get());
                    if (value != lastValue) {
                        entry.set(value, timestamp);
                        lastValue = value;
                    }
                }
            };
        } else {
            consumer = (timestamp) -> entry.set(toLongArray(valueSupplier.get()), timestamp);
        }

        addField(
            entryName,
            level,
            consumer,
            () -> entry.set(toLongArray(valueSupplier.get())),
            entry::unpublish
        );
{%else%}
        if (this.isLazy()) {
            consumer = new LongConsumer() {
                private {{t.java.ValueType}} lastValue = {{t.java.EmptyValue}};
                @Override
                public void accept(long timestamp) {
                    var value = valueSupplier.get();
                    if (value != lastValue) {
                        entry.set(value, timestamp);
                        lastValue = value;
                    }
                }
            };
        } else {
            consumer = (timestamp) -> entry.set(valueSupplier.get(), timestamp);
        }

        addField(
            entryName,
            level,
            consumer,
            () -> entry.set(valueSupplier.get()),
            entry::unpublish
        );
{%endif%}
    }
{%endfor%}

    @Override
    public <R> void addStruct(String entryName, Struct<R> struct, Supplier<? extends R> valueSupplier, LogLevel level) {
        var topic = table.getStructTopic(entryName, struct);
        var publisher = topic.publish();
        addField(
            entryName,
            level,
            timestamp->publisher.set(valueSupplier.get(), timestamp),
            ()->publisher.set(valueSupplier.get()),
            ()->NetworkTablesJNI.unpublish(publisher.getHandle())
        );
    }

    @Override
    @SuppressWarnings("unchecked")
    public <R> void putStruct(String entryName, Struct<R> struct, R value, LogLevel level) {
        if (level == LogLevel.DEBUG && !Monologue.isDebug()) {
            if (published.containsKey(entryName) && topics.containsKey(entryName) && structEntrys.containsKey(entryName)) {
                ((StructEntry<R>) structEntrys.remove(entryName)).unpublish();
                NetworkTablesJNI.unpublish(published.remove(entryName));
            }
            return;
        } else if (level == LogLevel.FILE_IN_COMP && !Monologue.isDebug()) {
            Monologue.dataLogger.putStruct(entryName, struct, value);
            if (published.containsKey(entryName) && topics.containsKey(entryName) && structEntrys.containsKey(entryName)) {
                ((StructEntry<R>) structEntrys.remove(entryName)).unpublish();
                NetworkTablesJNI.unpublish(published.remove(entryName));
            }
            return;
        }

        if (!topics.containsKey(entryName)) {
            var topic = table.getStructTopic(entryName, struct);
            var publisher = topic.publish();
            published.put(entryName, publisher.getHandle());
            topics.put(entryName, topic);
        }

        if (!published.containsKey(entryName)) {
            published.put(entryName, ((StructTopic<R>) topics.get(entryName)).publish().getHandle());
        }

        if (!structEntrys.containsKey(entryName)) {
            var entry = ((StructTopic<R>) topics.get(entryName)).getEntry(null);
            entry.set(value);
            structEntrys.put(entryName, entry);
        } else {
            ((StructEntry<R>) structEntrys.get(entryName)).set(value);
        }
    }

    @Override
    public void addSendable(String path, Sendable sendable) {        
        var builder = new SendableBuilderImpl();
        builder.setTable(table.getTable(path));
        sendable.initSendable(builder);
        builder.startListeners();
        table.getTable(path).getEntry(".controllable").setBoolean(false);
        sendables.add(builder);
    }

    public void helper(Supplier<?> supplier, DataType type, String path, boolean oneShot, LogLevel level) {
        switch (type) {
{%for t in types%}
            case {{t.TypeName}}:
                if (oneShot) {
                    put(path, ({{t.java.ValueType}}) supplier.{{t.java.SupplierGet}}(), level);
                } else {
                    add{{t.TypeName}}(path, () -> ({{t.java.ValueType}}) supplier.{{t.java.SupplierGet}}(), level);
                }
                break;
{%endfor%}
            case Sendable:
                addSendable(path, (Sendable) supplier.get());
                break;
{%for t in geomTypes%}
            case {{t.TypeName}}:
                if (oneShot) {
                    put(path, ({{t.TypeName}}) supplier.get(), level);
                } else {
                    add{{t.TypeName}}(path, ()->({{t.TypeName}}) supplier.get(), level);
                }
                break;
{%endfor%}
            default:
                throw new IllegalArgumentException("Invalid data type");
        }
    }

    @Override
    public Boolean isNT() {
        return true;
    }
}