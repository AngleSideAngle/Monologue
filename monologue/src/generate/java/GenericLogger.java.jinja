package monologue;

{%for t in geomTypes%}
import edu.wpi.first.math.geometry.{{t.TypeName}};
{%endfor%}
import edu.wpi.first.networktables.NTSendable;
import edu.wpi.first.util.struct.Struct;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.util.sendable.SendableBuilder;
import java.util.function.*;

import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.function.Supplier;

import edu.wpi.first.wpilibj.Timer;

public abstract class GenericLogger {
    public interface LogRunnable extends LongConsumer {
        void close();
    }
    protected GenericLogger() {}

    protected LogRunnable field(LongConsumer run, Runnable close) {
        return new LogRunnable() {
            @Override
            public void accept(long timestamp) {
                run.accept(timestamp);
            }
            @Override
            public void close() {
                close.run();
            }
        };
    }

    protected final Map<String, LogRunnable> map = new HashMap<>();
    protected final Collection<SendableBuilder> sendables = new LinkedHashSet<>();

    {%for t in types%}
    public void put(String entryName, {{t.java.ValueType}} value) {
        put(entryName, value, LogLevel.COMP);
    }
    public void put(String entryName, {{t.java.ValueType}} value, LogLevel level) {}

    public void add{{t.TypeName}}(String entryName, {{t.java.Supplier}} valueSupplier) {}
    {%endfor%}

    {%for t in geomTypes%}
    public void put(String entryName, {{t.TypeName}} value) {
        put(entryName, value, LogLevel.COMP);
    }
    public void put(String entryName, {{t.TypeName}} value, LogLevel level) {
        putStruct(entryName, {{t.TypeName}}.struct, value);
    }
    public void add{{t.TypeName}}(String entryName, Supplier<{{t.TypeName}}> valueSupplier) {}
    {%endfor%}

    public <R> void addStruct(String entryName, Struct<R> struct, Supplier<?extends R> valueSupplier) {}
    public <R> void putStruct(String entryName, Struct<R> struct, R value, LogLevel level) {}
    public <R> void putStruct(String entryName, Struct<R> struct, R value) {
        putStruct(entryName, struct, value, LogLevel.COMP);
    }

    public void addSendable(String pathPrefix, String name, Sendable sendable) {
        String prefix;
        if (!pathPrefix.endsWith("/")) {
            prefix = pathPrefix + "/" + name + "/";
        } else {
            prefix = pathPrefix + name + "/";
        }
        addSendable(prefix, sendable);
    }

    public void addSendable(String path, Sendable sendable) {};

    public void addSendable(String pathPrefix, String name, NTSendable sendable) {
        String prefix;
        if (!pathPrefix.endsWith("/")) {
            prefix = pathPrefix + "/" + name + "/";
        } else {
            prefix = pathPrefix + name + "/";
        }
        addSendable(prefix, sendable);
    }

    public void addSendable(String path, NTSendable sendable) {
        addSendable(path, (Sendable) sendable);
    };

    public void update() {
        long timestamp = (long) (Timer.getFPGATimestamp() * 1e6);
        for (Map.Entry<String, LogRunnable> entry : map.entrySet()) {
            var val = entry.getValue();
            val.accept(timestamp);
        }
        sendables.forEach(SendableBuilder::update);
    }
}