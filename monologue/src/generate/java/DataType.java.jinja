package monologue;

import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.networktables.NTSendable;
enum DataType {
{%for t in types%}
    {{t.TypeName}},{%endfor%}
    Struct,
    Sendable,
    NTSendable;


    public static DataType fromClass(Class<?> clazz) throws IllegalArgumentException {
        // if clazz has NTSendable interface
        for (Class<?> cls : clazz.getInterfaces()) {
            if (cls.equals(NTSendable.class)) {
                return NTSendable;
            }
        }
        // if clazz does not have NTSendable, but does have Sendable
        for (Class<?> cls : clazz.getInterfaces()) {
            if (cls.equals(Sendable.class)) {
                return Sendable;
            }
        }
        clazz = complexFromPrim(clazz);
        {%for t in types%}
        {%if t.java.WrapValueType is defined%}
        if (clazz.equals({{t.java.WrapValueType}}.class)) {
        {%else%}
        if (clazz.equals({{t.java.ValueType}}.class)) {
        {%endif%}
            return {{t.TypeName}};
        }
        {%endfor%}
        if (NTSendable.class.isAssignableFrom(clazz)) {
            return NTSendable;
        } else if (Sendable.class.isAssignableFrom(clazz)) {
            return Sendable;
        } else {
            throw new IllegalArgumentException("Invalid datatype");
        }
    }

    private static Class<?> complexFromPrim(Class<?> clazz) {

        {%for t in types%}
        if (clazz.equals({{t.java.ValueType}}.class)) {

        {%if t.java.WrapValueType is defined%}
            return {{t.java.WrapValueType}}.class;
        {%else%}
            return {{t.java.ValueType}}.class;
        {%endif%}
        } else
        {%endfor%}
        if (clazz.equals(int.class)) {
            return Integer.class;
        } else
        {%endfor%}
        {
            return clazz;
        }
    }
}
