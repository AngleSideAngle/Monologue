package monologue;


{%for t in geomTypes%}
import edu.wpi.first.math.geometry.{{t.TypeName}};
{%endfor%}
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NTSendable;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilderImpl;
import edu.wpi.first.util.datalog.*;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.wpilibj.DataLogManager;
import java.util.function.Supplier;
import edu.wpi.first.util.struct.Struct;

class DataLogger extends GenericLogger {
    private DataLog log = DataLogManager.getLog();

    public DataLogger(){
        super();
        DataLogManager.logNetworkTables(false);
    };

    {%for t in types%}
    @Override
    public void put(String entryName, {{t.java.ValueType}} value, LogLevel level) {
        if (level == LogLevel.DEBUG && !Monologue.isDebug()) {
            return;
        }

{%if t.TypeName == 'IntegerArray'%}
        new {{t.java.EntryName}}LogEntry(log, entryName)
            .append(toLongArray(value));
{%else%}
        new {{t.java.EntryName}}LogEntry(log, entryName).append(value);
{%endif%}
    }

    @Override
    public void add{{t.TypeName}}(String entryName, {{t.java.Supplier}} valueSupplier, LogLevel level) {
        var entry = new {{t.java.EntryName}}LogEntry(log, entryName);
{%if t.TypeName == 'IntegerArray'%}
        addField(
            entryName,
            level,
            timestamp->entry.append(toLongArray(valueSupplier.get()), timestamp)
        );
{%else%}
        addField(
            entryName,
            level,
            timestamp->entry.append(valueSupplier.get(), timestamp)
        );
{%endif%}
    }
{%endfor%}

    @Override
    public void addSendable(String path, Sendable sendable) {    
        System.out.println("logging regular sendable at " + path);    
        var builder = new DataLogSendableBuilder(path);
        sendable.initSendable(builder);
        sendables.add(builder);
    }

    @Override
    public void addSendable(String path, NTSendable sendable) {
        System.out.println("logging ntsendable at " + path);
        var table = NetworkTableInstance.getDefault().getTable(path);
        var builder = new SendableBuilderImpl();
        builder.setTable(table);
        sendable.initSendable(builder);
        builder.startListeners();
        table.getEntry(".controllable").setBoolean(false);
        sendables.add(builder);
        NetworkTableInstance.getDefault().startEntryDataLog(DataLogManager.getLog(), path, path);
    }

    @Override
    public <R> void addStruct(String entryName, Struct<R> struct, Supplier<? extends R> valueSupplier, LogLevel level) {
        var entry = StructLogEntry.create(log, entryName, struct);
        addField(
            entryName,
            level,
            timestamp->entry.append(valueSupplier.get(), timestamp)
        );
    }

    @Override
    public <R> void putStruct(String entryName, Struct<R> struct, R value, LogLevel level) {
        if (level == LogLevel.DEBUG && !Monologue.isDebug()) {
            return;
        }

        StructLogEntry.create(log, entryName, struct).append(value);
    }

    public void helper(Supplier<?> supplier, DataType type, String path, boolean oneShot, LogLevel level) {
        switch (type) {
        {%for t in types%}
            case {{t.TypeName}}:
                if (oneShot) {
                    put(path, ({{t.java.ValueType}}) supplier.{{t.java.SupplierGet}}(), level);
                } else {
                    add{{t.TypeName}}(path, () -> ({{t.java.ValueType}}) supplier.{{t.java.SupplierGet}}(), level);
                }
                break;
            {%endfor%}
            case Sendable:
                addSendable(path, (Sendable) supplier.get());
                break;
            case NTSendable:
                addSendable(path, (Sendable) supplier.get());
                break;
        {%for t in geomTypes%}
            case {{t.TypeName}}:
                if (oneShot) {
                    put(path, ({{t.TypeName}}) supplier.get(), level);
                } else {
                    add{{t.TypeName}}(path, ()->({{t.TypeName}}) supplier.get(), level);
                }
                break;
        {%endfor%}
            default:
                throw new IllegalArgumentException("Invalid data type");
        }
    }

    @Override
    public Boolean isNT() {
        return false;
    }
}